#!/bin/sh

file="${1}"
tmpdir="/tmp/calcom"

parse() {
	head=$(head -n 1 "${file}")
	max=$(date -d "1 ${head} + 1 month - 1 day" +%d)
	first=$(date -d "1 ${head}" +%u)

	month=$(date -d "1 ${head}" +"%B")
	year=$(date -d "1 ${head}" +"%Y")

	printf "\\\\documentclass[11pt]{article}\n\\\\usepackage{calendar}\n\\\\usepackage[landscape, paperwidth=25.2cm, paperheight=35.64cm, margin=0.4cm]{geometry}\n\\\\usepackage{palatino}\n\\\\begin{document}\n\\\\hoffset=-0.85in\n\\\\voffset=-0.75in\n\\\\setbox0\\\\hbox{\\\\begin{minipage}{\\\\textwidth}\\\\pagestyle{empty}\n\\\\setlength{\\\\parindent}{0pt}\n\\\\StartingDayNumber=2\n\\\\begin{center}\n\\\\textsc{\\\\LARGE ${month}}\n\\\\textsc{\\\\large ${year}}\n\\\\end{center}\n\\\\begin{calendar}{\\\\textwidth}"



	for i in $(seq $((${first}-1))); do
		printf "\\BlankDay\n"
	done

	printf "\\setcounter{calendardate}{1}\n"

	for i in $(seq ${max}); do
		data=$(cat test.cal | tr '\n' '\r' | sed -e 's/\r\r*/\r/g' -e 's/\r\t/\t/g' | tr '\r' '\n' | sed -e 's/$/\t~/g' -e 's/:/:\n/g' -e 's/\t/\r/' -e 's/\t/\n\r/' -e 's/\t/\\\\\\\\/g' -e 's/\r/\t/g' -e 's/\\\\\\\\~//g' |\
		grep -A 2 "^${i}:" | grep "^${i}:\\|^\t" | sed 's/&/\\&/g')
		if [ -z "${data}" ]; then
			printf "\\day{~}{~}\n"
		else
			printf "\\day{"
			#printf "${data}\n" | tr "\n" "\t" |\
			#	sed -e 's|[1-9][1-9]*:\t\t||' -e 's|[0-9][0-9]*:\t\t|\\dayheader{|g' \
			#	-e 's|\t\t|}{|' -e 's|\t\t|}{}\\eventskip |g' -e 's|\t|\\eventskip|g'
			printf "${data}" | tr "\n" "\t" |\
				sed -e 's|^[0-9]*[0-9]:\t\t||' -e 's|\t\t|}{|'\
				-e 's|[0-9]*[0-9]:\t\t|\\dayheader{|g' -e 's|\t\t|}{}\t|g'\
				-e 's|\t|\\eventskip |g'
			printf "}\n"
		fi
	done

	for i in $(seq $((36-${max}-${first}))); do
		printf "\\BlankDay\n"
	done

	printf "\\\\finishCalendar\n\\\\end{calendar}\n\\\\end{minipage}}\n\\\\pdfpageheight=\dimexpr\\\\ht0+\\\\dp0+0.75in\\\\relax\\\\shipout\\\\box0\\\\stop\n"
}

recurse() {
	raw=$(grep -A 2 -m 1 "^every" "${file}" | grep "^every\\|^\t")
	if [ -z "${raw}" ]; then
		compile
	else
		recursor=$(printf "%s\n" "${raw}" | head -n 1 | cut -d " " -f 2)
		number=$(printf "${recursor}" | sed 's|[0-9][0-9]*d||g')
		frequency=$(printf "${recursor}" | sed 's|d[0-9][0-9]*||g')
		start=$(printf "%s\n" "${raw}" | head -n 1 | cut -d " " -f 3)
		data=$(printf "%s\n" "${raw}" | grep "^\t")

		replace="${start}\n${data}\n"
		for i in $(seq $((${number}-1))); do
			replace="${replace}\n$((${start%%:} + (${frequency} * ${i}))):\n${data}\n" >> "${file}"
		done

		remove=$(printf "%s" "${raw}" | tr "\n" "\r")
		new=$(printf "%s" "${replace}" | tr "\n" "\r")
		cat "${file}" | tr "\n" "\r" | sed "s|${remove}|${new}|g" | tr "\r" "\n" > "${file}.tmp"
		mv "${file}.tmp" "${file}"
		recurse
	fi
}

compile() {
	#id=$(shuf -i 1000-9999 | head -n 1)

	echo "Parsing ${name}..."
	parse > compile/${name}.tex
	echo "Compiling ${name}..."
	xelatex -output-directory compile/ compile/${name}.tex
	mv compile/${name}.pdf ${name}.pdf
}

#compile
mkdir compile 2> /dev/null
name=${file%%.*}
cp "${file}" ".${file}.working"
file=".${file}.working"
recurse
rm "${file}"

