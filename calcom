#!/usr/bin/python3

def ParseCAL(filename, CalEvents):
	print("Parsing " + filename +  " as a calcom file")

	recursor = []

	with open(filename) as file:
		for index, line in enumerate(file):
			if index != 0:
				if line != '\n': # Discard Empty lines
					if line[0] != '\t': # Non-indented lines are day keys
						RecurseCAL(recursor, CalEvents)
						if ' ' in line: # This is a recurring event
							day = int(line.split(' ')[1][:-2])
							recursor = [line.split(' '), month, CalEvents[month][day]['amount'] + 1]
						else:
							day = int(line[:-2])
						CalEvents[month][day]['amount'] += 1
						CalEvents[month][day][CalEvents[month][day]['amount']] = []
					else:
						CalEvents[month][day][CalEvents[month][day]['amount']].append(line[1:-1])
			else:
				month = line[:-1]
				if month not in CalEvents:
					CalEvents[month] = CalEventsInit(month)
		RecurseCAL(recursor, CalEvents)
	return CalEvents	

def RecurseCAL(recursor, CalEvents):
	if recursor != []:
		month = recursor[1]
		day = int(recursor[0][1][:-2])
		try:
			frequencyType = [e for e in ['days', 'months', 'years', 'd', 'm', 'y'] if e in recursor[0][0]][0]
		except:
			print('Unknown repeating event type \"' + recursor[0][0] + '\" not repeating')
			return

		frequency = int(recursor[0][0].split(frequencyType)[0])
		number = int(recursor[0][0].split(frequencyType)[1])
		frequencyType = frequencyType.translate(str.maketrans({"d":  r"days", "m":  r"months", "y": r"years"}))
		eventKey = recursor[2]

		for index in range(1, number + 1):
			startArrow = arrow.get(str("{:02d}".format(day)) + ' ' + month, 'DD MMMM YYYY')
			targetArrow = startArrow.dehumanize('in ' + str(frequency * index)  + ' ' + frequencyType)
			
			targetDay = int(targetArrow.format('DD'))
			targetMonth = targetArrow.format('MMMM YYYY')

			if targetMonth not in CalEvents:
				CalEvents[targetMonth] = CalEventsInit(targetMonth)


			CalEvents[targetMonth][targetDay]['amount'] += 1
			CalEvents[targetMonth][targetDay][CalEvents[targetMonth][targetDay]['amount']] = CalEvents[month][day][eventKey]

			print(str(targetDay) + " " + targetMonth )

		recursor = []

def ParseICS(filename, CalEvents):
	print("Parsing " + filename +  " as an ICS file")
	with open(filename) as file:
		calendar = Calendar(file.read())
	
	for event in calendar.events:
		month = event.begin.format('MMMM YYYY')
		day = int(event.begin.format('DD'))
		time = event.begin.format('HH:mm') + ' - ' + event.end.format('HH.mm')
		if month not in CalEvents:
			CalEvents[month] = CalEventsInit(month)
		CalEvents[month][day]['amount'] += 1
		CalEvents[month][day][CalEvents[month][day]['amount']] = []
		CalEvents[month][day][CalEvents[month][day]['amount']].append(event.name)
		if time != '00:00 - 00:00':
			CalEvents[month][day][CalEvents[month][day]['amount']].append(time)
		if event.location != None:
			CalEvents[month][day][CalEvents[month][day]['amount']].append('; '.join(event.location.split('\n')))
		if event.description != None:
			CalEvents[month][day][CalEvents[month][day]['amount']].append('; '.join(event.description.split('\n')))

	return CalEvents

def CalEventsInit(header):
	firstDay = int(arrow.get(header, 'MMMM YYYY').format('d'))
	lastArrow = arrow.get(header, 'MMMM YYYY').dehumanize('in a month').dehumanize('1 days ago')
	lastDay = int(lastArrow.format('d'))
	maxDays = int(lastArrow.format('DD'))

	CalEvents = {}
	CalEvents['metadata'] = {}
	CalEvents['metadata']['title'] = header
	CalEvents['metadata']['firstDay'] = firstDay
	CalEvents['metadata']['lastDay'] = lastDay
	CalEvents['metadata']['maxDays'] = maxDays

	for day in range(1,maxDays+1):
		CalEvents[day] = {}
		CalEvents[day]['amount'] = 0
	
	return CalEvents

def OutputTEX(CalEvents):
	print('Generating LaTeX file for ' + CalEvents['metadata']['title'])
	data = "\\documentclass[11pt]{article}\n\\usepackage{calendar}\n\\usepackage[landscape, paperwidth=25.2cm, paperheight=35.64cm, margin=0.4cm]{geometry}\n\\usepackage{palatino}\n\\begin{document}\n\\hoffset=-0.85in\n\\voffset=-0.75in\n\\setbox0\\hbox{\\begin{minipage}{\\textwidth}\\pagestyle{empty}\n\\setlength{\\parindent}{0pt}\n\\StartingDayNumber=2\n\\begin{center}\n"
	for index,day in enumerate(CalEvents):
		if index == 0:
			data += '\\textsc{\\LARGE ' + CalEvents['metadata']['title'].split(' ')[0] + '}\n\\textsc{\\large ' + CalEvents['metadata']['title'].split(' ')[1] + '}\n'
			data += '\\end{center}\n\\begin{calendar}{\\textwidth}\n'
			data += '\\BlankDay\n' * (CalEvents['metadata']['firstDay'] - 1)
			data += '\\setcounter{calendardate}{1}\n'
		else:
			data += '\\day{'
			for event in range(1, CalEvents[day]['amount'] + 1):
				if event == 1:
					data += (CalEvents[day][event][0] + '}{~' + '\\\\~'.join(CalEvents[day][event][1:])).translate(str.maketrans({"&":  r"\&", "$":  r"\$"}))
				else:
					data += ('\\eventskip \\dayheader{' + CalEvents[day][event][0] + '}{}\\eventskip ' + '\\\\~'.join(CalEvents[day][event][1:])).translate(str.maketrans({"&":  r"\&", "$":  r"\$"}))
			if CalEvents[day]['amount'] == 0:
				data += '~}{~'
			data += '}\n'
	data += '\\BlankDay\n' * (7 - CalEvents['metadata']['lastDay'])
	data += "\\finishCalendar\n\\end{calendar}\n\\end{minipage}}\n\\pdfpageheight=\\dimexpr\\ht0+\\dp0+0.75in\\relax\\shipout\\box0\\stop"

	return data

def CompilePDF(TexData, outputFileName, compileDirectory):
	print('Compiling PDF for ' + outputFileName)
	#if os.system('xelatex -halt-on-error -output-directory=' + compileDirectory + ' ' + outputFileName + ' > /dev/null') != 0:
	#	print('Something went wrong while compiling ' + month)
	if os.system('xelatex -output-directory=' + compileDirectory + ' -jobname=' + outputFileName  + ' \"' + '\" \"'.join(TexData.split('\n')) + '\" > /dev/null' ) != 0:
		print('Something went wrong while compiling ' + outputFileName)

def MergePDFs(OutputPDFs, CombinedFileName):
	print('Merging PDFs into ' + CombinedFileName)
	merger = PdfWriter()
	for pdf in OutputPDFs:
		merger.append(pdf)
	merger.write(CombinedFileName)
	merger.close()
		

import sys
import os
import arrow

try:
	import multiprocessing
	asyncronous = True
except:
	print('[WARNING} Failed to load Python Library \"multiprocessing\". All processing will be done on one thread')
	asyncronous = False

try:
	from ics import Calendar, Event
except:
	print('[WARNING] Failed to load Python Library \"ics\". Cannot process ICS files.')
	def ParseICS(CalEvents):
		print('[WARNING] Failed to load Python Library \"ics\". Cannot process ICS files.')
		
try:
	from pypdf import PdfWriter
except:
	print('[WARNING} Failed to load Python Library \"pyPDF\". Output PDF\'s will not be merged.')
	def MergePDFs():
		print('[WARNING} Failed to load Python Library \"pyPDF\". Output PDF\'s will not be merged.')

def main():
	CalEvents = {}
	OutputPDFs = []
	ProcessingStack = []
	jobs = max(1, multiprocessing.cpu_count() - 1)

	for input_file in sys.argv[1:]:
		if input_file[-3:] == 'ics':
			CalEvents = ParseICS(input_file, CalEvents)
		else:
			CalEvents = ParseCAL(input_file, CalEvents)
	
	compileDirectory = '.compile/'
	if not os.path.exists(compileDirectory):
		os.makedirs(compileDirectory)

	for month in CalEvents:
		TexData = OutputTEX(CalEvents[month])
		outputFileName = arrow.get(month, 'MMMM YYYY').format('YYYY-MM')
		OutputPDFs.append(compileDirectory + outputFileName + '.pdf')
		if asyncronous:
			ProcessingStack.append(multiprocessing.Process(target=CompilePDF, args=(TexData, outputFileName, compileDirectory)))
		else:
			CompilePDF(TexData, outputFileName, compileDirectory)
	
	while len(ProcessingStack) > 0:
		if len(multiprocessing.active_children()) < jobs:
			ProcessingStack[0].start()
			ProcessingStack.pop(0)
	
	while len(multiprocessing.active_children()) > 0:
		multiprocessing.active_children()[0].join()


	MergePDFs(sorted(OutputPDFs), 'all.pdf')

	

			
			

main()
